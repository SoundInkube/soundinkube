// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ARTIST
  STUDIO_OWNER
  MUSIC_PROFESSIONAL
  ARTIST_MANAGER
  RECORD_LABEL
  BUSINESS_JAMPAD
  BUSINESS_MUSIC_SCHOOL
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACCEPTED
  DECLINED
  COMPLETED
  CANCELLED
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

enum ListingType {
  INSTRUMENT
  GEAR
  EQUIPMENT
  ACCESSORY
  OTHER
}

enum CollabType {
  PROJECT
  BAND
  ONETIME
  MENTORSHIP
  OTHER
}

enum JamPadType {
  STUDIO
  REHEARSAL
  RECORDING
  PRODUCTION
  TEACHING
  OTHER
}

enum MusicSchoolType {
  INSTRUMENT
  VOCALS
  PRODUCTION
  THEORY
  BUSINESS
  OTHER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  WAITLISTED
  ENROLLED
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_APPROVAL
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  passwordHash   String
  role           UserRole  @default(CLIENT)
  isVerified     Boolean   @default(false)
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  profile        Profile?
  businessProfile BusinessProfile?
  sentMessages   Message[] @relation("SenderRelation")
  receivedMessages Message[] @relation("ReceiverRelation")
  bookingsAsClient Booking[] @relation("ClientBookings")
  bookingsAsProfessional Booking[] @relation("ProfessionalBookings")
  reviews        Review[] @relation("ReviewsReceived")
  reviewsGiven   Review[] @relation("ReviewsGiven")
  marketListings MarketplaceListing[] @relation("SellerRelation")
  collabPosts    CollaborationPost[] @relation("AuthorRelation")
  collabRequests CollaborationRequest[] @relation("RequesterRelation")
  jampadBookings JamPadBooking[] @relation("BookerRelation")
  studios        Studio[] @relation("StudioOwner")
  
  // Manager/Label relationships
  managedArtists ManagedArtist[] @relation("ManagerRelation")
  artistManagers ManagedArtist[] @relation("ArtistRelation")
  
  // School applications
  schoolApplications SchoolApplication[]
  
  // Tokens for verification, password reset, etc.
  tokens         Token[]
}

model Token {
  id          String   @id @default(uuid())
  token       String   @unique
  type        String   // verification, password_reset, refresh
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String
  displayName   String?
  bio           String?  @db.Text
  avatar        String?
  coverImage    String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  zipCode       String?
  birthDate     DateTime?
  gender        Gender?
  website       String?
  socialLinks   Json?
  
  // Social Media URLs
  spotifyUrl    String?
  youtubeUrl    String?
  appleMusicUrl String?
  soundcloudUrl String?
  facebookUrl   String?
  
  // Professional specific fields
  isProfessional Boolean @default(false)
  specialties    String[]
  yearsExperience Int?
  hourlyRate     Decimal? @db.Decimal(10, 2)
  availability   Json?
  education      Json?
  certificates   Json?
  portfolio      Json?
  averageRating  Float?   @default(0)
  totalReviews   Int      @default(0)
  
  // Relations
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BusinessProfile {
  id                String        @id @default(uuid())
  businessName      String
  businessType      String        // jampad, music_school
  description       String        @db.Text
  logo              String?
  coverImage        String?
  phone             String?
  email             String?
  website           String?
  socialLinks       Json?
  
  // Address information
  address           String
  city              String
  state             String?
  country           String
  zipCode           String
  
  // Business details
  businessHours     Json?
  amenities         String[]
  images            String[]
  status            BusinessStatus @default(PENDING_APPROVAL)
  averageRating     Float?        @default(0)
  totalReviews      Int           @default(0)
  
  // Relations
  userId            String        @unique
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  jampadDetails     JampadBusinessDetails?
  schoolDetails     SchoolBusinessDetails?
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model JampadBusinessDetails {
  id                String        @id @default(uuid())
  capacity          Int
  hourlyRate        Decimal       @db.Decimal(10, 2)
  equipmentList     Json?
  roomTypes         String[]
  bookingRules      Json?
  cancellationPolicy String?      @db.Text
  
  // Relations
  businessProfileId String        @unique
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)
  bookings          JamPadBooking[]
  availableSlots    AvailabilitySlot[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model SchoolBusinessDetails {
  id                String        @id @default(uuid())
  schoolType        MusicSchoolType
  faculty           Json?         // Array of faculty information
  facilities        String[]
  accreditations    String[]
  admissionRequirements Json?
  applicationDeadlines Json?
  
  // Relations
  businessProfileId String        @unique
  businessProfile   BusinessProfile @relation(fields: [businessProfileId], references: [id], onDelete: Cascade)
  courses           Course[]
  applications      SchoolApplication[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model ManagedArtist {
  id              String   @id @default(uuid())
  
  // Relations
  managerId       String
  manager         User     @relation("ManagerRelation", fields: [managerId], references: [id])
  artistId        String
  artist          User     @relation("ArtistRelation", fields: [artistId], references: [id])
  
  // Management details
  contractStart   DateTime?
  contractEnd     DateTime?
  commissionRate  Decimal? @db.Decimal(5, 2)
  permissions     Json?    // What the manager can do on behalf of the artist
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([managerId, artistId])
}

model AvailabilitySlot {
  id              String   @id @default(uuid())
  date            DateTime
  startTime       DateTime
  endTime         DateTime
  isBooked        Boolean  @default(false)
  price           Decimal? @db.Decimal(10, 2)
  
  // Relations
  jampadDetailsId String
  jampadDetails   JampadBusinessDetails @relation(fields: [jampadDetailsId], references: [id], onDelete: Cascade)
  booking         JamPadBooking?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SchoolApplication {
  id              String            @id @default(uuid())
  applicationData Json              // Flexible application form data
  status          ApplicationStatus @default(PENDING)
  notes           String?           @db.Text
  
  // Relations
  applicantId     String
  applicant       User              @relation(fields: [applicantId], references: [id])
  schoolDetailsId String
  schoolDetails   SchoolBusinessDetails @relation(fields: [schoolDetailsId], references: [id])
  courseId        String?
  course          Course?           @relation(fields: [courseId], references: [id])
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Booking {
  id              String        @id @default(uuid())
  title           String?
  description     String?       @db.Text
  status          BookingStatus @default(PENDING)
  startTime       DateTime
  endTime         DateTime
  location        String?
  totalPrice      Decimal?      @db.Decimal(10, 2)
  notes           String?       @db.Text
  
  // Relations
  userId          String
  client          User          @relation("ClientBookings", fields: [userId], references: [id])
  professionalId  String
  professional    User          @relation("ProfessionalBookings", fields: [professionalId], references: [id])
  studioId        String?
  studio          Studio?       @relation(fields: [studioId], references: [id])
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  payment         Payment?
}

model Message {
  id           String        @id @default(uuid())
  content      String        @db.Text
  status       MessageStatus @default(SENT)
  isRead       Boolean       @default(false)
  
  // Relations
  senderId     String
  sender       User          @relation("SenderRelation", fields: [senderId], references: [id])
  recipientId  String
  recipient    User          @relation("ReceiverRelation", fields: [recipientId], references: [id])
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Review {
  id           String     @id @default(uuid())
  rating       Int        // 1-5 stars
  comment      String?    @db.Text
  
  // Relations
  reviewerId   String
  reviewer     User       @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  revieweeId   String
  reviewee     User       @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Payment {
  id           String   @id @default(uuid())
  amount       Decimal  @db.Decimal(10, 2)
  currency     String   @default("USD")
  method       String?  // credit_card, paypal, etc.
  status       String   // pending, completed, failed, refunded
  transactionId String?
  
  // Relations
  bookingId    String   @unique
  booking      Booking  @relation(fields: [bookingId], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MarketplaceListing {
  id            String      @id @default(uuid())
  title         String
  description   String      @db.Text
  price         Decimal     @db.Decimal(10, 2)
  condition     String      // new, like_new, good, fair, poor
  listingType   ListingType
  brand         String?
  model         String?
  year          Int?
  images        String[]
  isAvailable   Boolean     @default(true)
  
  // Relations
  sellerId      String
  owner         User        @relation("SellerRelation", fields: [sellerId], references: [id])
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model CollaborationPost {
  id           String       @id @default(uuid())
  title        String
  description  String       @db.Text
  collabType   CollabType
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean      @default(true)
  skills       String[]     // Required skills for the collaboration
  location     String?      // Can be "Remote" or specific location
  
  // Relations
  authorId     String
  author       User         @relation("AuthorRelation", fields: [authorId], references: [id])
  requests     CollaborationRequest[]
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model CollaborationRequest {
  id           String     @id @default(uuid())
  message      String     @db.Text
  status       String     @default("PENDING") // PENDING, ACCEPTED, DECLINED
  
  // Relations
  postId       String
  post         CollaborationPost @relation(fields: [postId], references: [id])
  requesterId  String
  requester    User       @relation("RequesterRelation", fields: [requesterId], references: [id])
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}



model JamPadBooking {
  id                String     @id @default(uuid())
  startTime         DateTime
  endTime           DateTime
  status            BookingStatus @default(PENDING)
  totalPrice        Decimal    @db.Decimal(10, 2)
  notes             String?    @db.Text
  
  // Relations
  jampadDetailsId   String?
  jampadDetails     JampadBusinessDetails? @relation(fields: [jampadDetailsId], references: [id])
  availabilitySlotId String?   @unique
  availabilitySlot  AvailabilitySlot? @relation(fields: [availabilitySlotId], references: [id])
  userId            String
  booker            User       @relation("BookerRelation", fields: [userId], references: [id])
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}



model Studio {
  id              String    @id @default(uuid())
  name            String
  description     String?   @db.Text
  hourlyRate      Decimal   @db.Decimal(10, 2)
  location        String
  amenities       String[]
  images          String[]
  
  // Relations
  ownerId         String
  owner           User      @relation("StudioOwner", fields: [ownerId], references: [id])
  bookings        Booking[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Course {
  id                String        @id @default(uuid())
  title             String
  description       String        @db.Text
  duration          String        // e.g. "12 weeks", "6 months"
  price             Decimal       @db.Decimal(10, 2)
  schedule          Json?
  skillLevel        String        // beginner, intermediate, advanced
  capacity          Int?
  prerequisites     String[]
  
  // Relations
  schoolDetailsId   String
  schoolDetails     SchoolBusinessDetails @relation(fields: [schoolDetailsId], references: [id], onDelete: Cascade)
  applications      SchoolApplication[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}